// Copyright 2024 Bradley Elenbaas
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// 2nd-party libraries.
#include "terrortronics_library.h"

////////////////////////////////////////////////////////////////////////
// Function Stubs //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
void mainTimerFunction();
void minorTimerFunction();
void timeoutTimerFunction();
void targetTimerFunction8();
void targetTimerFunction9();
void targetTimerFunction10();
void targetTimerFunction11();
void targetTimerFunction12();

////////////////////////////////////////////////////////////////////////
// Pins ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
enum pinEnum {
  pinButtonStart = 4,
  pinLightDebug = 13
};

////////////////////////////////////////////////////////////////////////
// State ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
/**
   The state of the game.
*/
State state = State();

////////////////////////////////////////////////////////////////////////
// Serial //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
SerialClient serialClient;

////////////////////////////////////////////////////////////////////////
// Timers //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
const unsigned int MAIN_PERIOD = 3000L;
Timer mainTimer = Timer(MAIN_PERIOD, mainTimerFunction);
Timer timeoutTimer = Timer(TIMEOUT_PERIOD, timeoutTimerFunction);

////////////////////////////////////////////////////////////////////////
// Buttons /////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
const unsigned long DEBOUNCE_PERIOD_START = 10L;
const unsigned long DEBOUNCE_PERIOD_STOP = 5L;
enum buttonEnum {
  buttonStart = 0
};
ButtonActiveLow buttons[] = {
  ButtonActiveLow(
    pinButtonStart,
    ButtonTimer(),
    DEBOUNCE_PERIOD_START,
    DEBOUNCE_PERIOD_STOP,
    startButtonFunctionPress,
    startButtonFunctionRelease)
};
unsigned int buttonsSize;

////////////////////////////////////////////////////////////////////////
// Lights //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
enum lightEnum {
  lightDebug = 0
};
Light lights[] {
  Light(pinLightDebug)
};

////////////////////////////////////////////////////////////////////////
// Wifi ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Mouse and Keyboard //////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Reused Variables ////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
int result;
bool isBlocked;
bool isBlocked2;
enum otherEnum {
  otherArduinoDue = 48,
  otherArduinoNano = 49,
  otherArduinoMicro = 50,
  otherFeatherESP32 = 51,
  otherTeensyLC = 52
};

////////////////////////////////////////////////////////////////////////
// Untested ////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
char charBuffer[1];
int targetIndex = 3;
bool isIncoming;
bool isTargetSet;
bool isTarget;
bool isScoreSent;
