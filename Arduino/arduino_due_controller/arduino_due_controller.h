// 1st-party libraries.
#include <Keyboard.h>
// 2nd-party libraries.
#include "terrortronics_library.h"

////////////////////////////////////////////////////////////////////////
// Function Stubs //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
void serialReset();
void mainTimerFunction();
void minorTimerFunction();
void timeoutTimerFunction();
void targetTimerFunction8();
void targetTimerFunction9();
void targetTimerFunction10();
void targetTimerFunction11();
void targetTimerFunction12();
//void keyboardRelease();
void startTerminal();
void startServer();

////////////////////////////////////////////////////////////////////////
// Pins ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
enum pinEnum {
  pinButtonStart = 4,
  pinLightDebug = 13
};

////////////////////////////////////////////////////////////////////////
// State ///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
/**
   The state of the game.
*/
State state = State();

////////////////////////////////////////////////////////////////////////
// Serial //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
char serialBuffer[2];
SerialClient serialClient;

////////////////////////////////////////////////////////////////////////
// Timers //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
const unsigned int MAIN_PERIOD = 3000L;
Timer mainTimer = Timer(MAIN_PERIOD, mainTimerFunction);
Timer timeoutTimer = Timer(TIMEOUT_PERIOD, timeoutTimerFunction);
Timer targetTimer8 = Timer(1000L, targetTimerFunction8);
Timer targetTimer9 = Timer(1000L, targetTimerFunction9);
Timer targetTimer10 = Timer(1000L, targetTimerFunction10);
Timer targetTimer11 = Timer(1000L, targetTimerFunction11);
Timer targetTimer12 = Timer(1000L, targetTimerFunction12);
//char key = '0';
//int keyIndex;
//bool isKeyboardBlocked;
//Timer keyboardTimer = Timer(10L, keyboardRelease);
const long DELAY_BETWEEN_KEY_PRESS = 10;

////////////////////////////////////////////////////////////////////////
// Buttons /////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
const unsigned long DEBOUNCE_PERIOD_START = 10L;
const unsigned long DEBOUNCE_PERIOD_STOP = 5L;
enum buttonEnum {
  buttonStart = 0
};
ButtonActiveLow buttons[] = {
  ButtonActiveLow(
    pinButtonStart,
    ButtonTimer(),
    DEBOUNCE_PERIOD_START,
    DEBOUNCE_PERIOD_STOP,
    startButtonFunctionPress,
    startButtonFunctionRelease)
};

////////////////////////////////////////////////////////////////////////
// Lights //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
enum lightEnum {
  lightDebug = 0
};
Light lights[] {
  Light(pinLightDebug)
};

////////////////////////////////////////////////////////////////////////
// Wifi ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Reused Variables ////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
int result;
bool isBlocked;
bool isBlocked2;
enum otherEnum {
  otherArduinoDue = 48,
  otherArduinoNano = 49,
  otherArduinoMicro = 50,
  otherFeatherESP32 = 51,
  otherTeensyLC = 52
};

////////////////////////////////////////////////////////////////////////
// Untested ////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
char charBuffer[1];
int targetIndex;
bool isIncoming;
bool isTargetSet;
bool isTarget;
